import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  FlatList,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation, useRoute, RouteProp } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';

// Components
import { Button, Card, StarRating } from '../../components';

// Services
import { useAuth } from '../../contexts/AuthContext';
import { useHotel } from '../../contexts/HotelContext';
import { useReview } from '../../contexts/ReviewContext';

// Navigation types
import { HotelsStackParamList } from '../../navigation/HotelsStackNavigator';

type HotelDetailRouteProp = RouteProp<HotelsStackParamList, 'HotelDetail'>;
type HotelDetailNavigationProp = StackNavigationProp<HotelsStackParamList, 'HotelDetail'>;

interface Props {
  navigation: HotelDetailNavigationProp;
  route: HotelDetailRouteProp;
}

const HotelDetailScreen: React.FC<Props> = ({ navigation, route }) => {
  const { hotel } = route.params;
  const { user } = useAuth();
  const { rooms, getHotelById } = useHotel();
  const { getReviewSummary } = useReview();
  const [hotelRooms, setHotelRooms] = useState<any[]>([]);
  const [reviewSummary, setReviewSummary] = useState<any>(null);
  const [selectedDates, setSelectedDates] = useState<{checkIn: Date | null, checkOut: Date | null}>({
    checkIn: null,
    checkOut: null
  });
  const [guests, setGuests] = useState(2);
  const [roomsCount, setRoomsCount] = useState(1);

  useEffect(() => {
    // Get rooms for this hotel
    const hotelRooms = rooms.filter(room => room.hotelId === hotel.id);
    setHotelRooms(hotelRooms);
    
    // Get review summary
    const summary = getReviewSummary(hotel.id, 'hotel');
    setReviewSummary(summary);
  }, [hotel.id, rooms, getReviewSummary]);

  const handleBookNow = (room: any) => {
    if (!selectedDates.checkIn || !selectedDates.checkOut) {
      Alert.alert('Select Dates', 'Please select check-in and check-out dates.');
      return;
    }

    // Calculate number of nights
    const nights = Math.ceil(
      (selectedDates.checkOut.getTime() - selectedDates.checkIn.getTime()) / (1000 * 60 * 60 * 24)
    );

    if (nights <= 0) {
      Alert.alert('Invalid Dates', 'Check-out date must be after check-in date.');
      return;
    }

    // Calculate total price
    const totalPrice = nights * room.price;

    // Navigate to payment screen
    navigation.navigate('Payment', {
      amount: totalPrice,
      currency: 'GHS',
      paymentFor: 'booking',
      referenceId: `booking_${Date.now()}` // In a real app, this would be generated by the backend
    });
  };

  const renderRoom = ({ item }: { item: any }) => {
    return (
      <Card style={styles.roomCard}>
        <View style={styles.roomContent}>
          {item.image ? (
            <View style={styles.roomImagePlaceholder}>
              <Ionicons name="bed" size={24} color="#666" />
            </View>
          ) : (
            <View style={styles.roomImagePlaceholder}>
              <Ionicons name="bed" size={24} color="#666" />
            </View>
          )}
          
          <View style={styles.roomInfo}>
            <Text style={styles.roomName}>{item.name}</Text>
            <Text style={styles.roomDescription} numberOfLines={2}>
              {item.description}
            </Text>
            <Text style={styles.roomPrice}>â‚µ{item.price.toFixed(2)}/night</Text>
          </View>
        </View>
        
        <View style={styles.roomActions}>
          <Button
            title="Book Now"
            onPress={() => handleBookNow(item)}
            style={styles.bookButton}
            size="small"
          />
        </View>
      </Card>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton} 
            onPress={() => navigation.goBack()}
          >
            <Ionicons name="arrow-back" size={24} color="#fff" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>{hotel.name}</Text>
          <TouchableOpacity 
            style={styles.favoriteButton}
            onPress={() => Alert.alert('Save Hotel', 'Hotel saved to favorites!')}
          >
            <Ionicons name="heart-outline" size={24} color="#fff" />
          </TouchableOpacity>
        </View>

        {/* Hotel Image */}
        <View style={styles.hotelImageContainer}>
          {hotel.image ? (
            <View style={styles.hotelImagePlaceholder}>
              <Ionicons name="bed" size={48} color="#fff" />
            </View>
          ) : (
            <View style={styles.hotelImagePlaceholder}>
              <Ionicons name="bed" size={48} color="#fff" />
            </View>
          )}
        </View>

        {/* Hotel Info */}
        <View style={styles.hotelInfo}>
          <Text style={styles.hotelName}>{hotel.name}</Text>
          
          <View style={styles.ratingContainer}>
            <StarRating 
              rating={reviewSummary?.averageRating || 0} 
              size={16}
              interactive={false}
            />
            <Text style={styles.ratingText}>
              {reviewSummary?.averageRating?.toFixed(1) || '0.0'} 
              {reviewSummary?.totalReviews ? ` (${reviewSummary.totalReviews})` : ''}
            </Text>
          </View>
          
          <View style={styles.hotelDetails}>
            <View style={styles.detailRow}>
              <Ionicons name="location" size={16} color="#666" />
              <Text style={styles.detailText}>{hotel.address}</Text>
            </View>
            
            <View style={styles.detailRow}>
              <Ionicons name="star" size={16} color="#666" />
              <Text style={styles.detailText}>{hotel.rating} Star Hotel</Text>
            </View>
          </View>
        </View>

        {/* Booking Options */}
        <Card style={styles.bookingCard}>
          <Text style={styles.sectionTitle}>Booking Options</Text>
          
          <View style={styles.dateSelection}>
            <TouchableOpacity 
              style={styles.dateButton}
              onPress={() => Alert.alert('Select Date', 'In a complete implementation, this would open a date picker')}
            >
              <Text style={styles.dateLabel}>Check-in</Text>
              <Text style={styles.dateValue}>
                {selectedDates.checkIn ? selectedDates.checkIn.toLocaleDateString() : 'Select date'}
              </Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={styles.dateButton}
              onPress={() => Alert.alert('Select Date', 'In a complete implementation, this would open a date picker')}
            >
              <Text style={styles.dateLabel}>Check-out</Text>
              <Text style={styles.dateValue}>
                {selectedDates.checkOut ? selectedDates.checkOut.toLocaleDateString() : 'Select date'}
              </Text>
            </TouchableOpacity>
          </View>
          
          <View style={styles.guestSelection}>
            <View style={styles.guestControl}>
              <Text style={styles.guestLabel}>Guests</Text>
              <View style={styles.quantityControl}>
                <TouchableOpacity 
                  style={styles.quantityButton}
                  onPress={() => setGuests(Math.max(1, guests - 1))}
                >
                  <Ionicons name="remove" size={20} color="#fff" />
                </TouchableOpacity>
                <Text style={styles.quantityText}>{guests}</Text>
                <TouchableOpacity 
                  style={styles.quantityButton}
                  onPress={() => setGuests(guests + 1)}
                >
                  <Ionicons name="add" size={20} color="#fff" />
                </TouchableOpacity>
              </View>
            </View>
            
            <View style={styles.guestControl}>
              <Text style={styles.guestLabel}>Rooms</Text>
              <View style={styles.quantityControl}>
                <TouchableOpacity 
                  style={styles.quantityButton}
                  onPress={() => setRoomsCount(Math.max(1, roomsCount - 1))}
                >
                  <Ionicons name="remove" size={20} color="#fff" />
                </TouchableOpacity>
                <Text style={styles.quantityText}>{roomsCount}</Text>
                <TouchableOpacity 
                  style={styles.quantityButton}
                  onPress={() => setRoomsCount(roomsCount + 1)}
                >
                  <Ionicons name="add" size={20} color="#fff" />
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Card>

        {/* Room Types */}
        <View style={styles.roomsSection}>
          <Text style={styles.sectionTitle}>Room Types</Text>
          <FlatList
            data={hotelRooms}
            renderItem={renderRoom}
            keyExtractor={(item) => item.id}
            scrollEnabled={false}
            contentContainerStyle={styles.roomsList}
          />
        </View>

        {/* Hotel Description */}
        <Card style={styles.descriptionCard}>
          <Text style={styles.sectionTitle}>About {hotel.name}</Text>
          <Text style={styles.descriptionText}>
            {hotel.description || 'This hotel offers comfortable accommodation in a prime location. Enjoy excellent service and amenities during your stay.'}
          </Text>
        </Card>

        {/* Reviews Summary */}
        {reviewSummary && reviewSummary.totalReviews > 0 && (
          <Card style={styles.reviewsCard}>
            <Text style={styles.sectionTitle}>Customer Reviews</Text>
            
            <View style={styles.reviewSummary}>
              <View style={styles.averageRating}>
                <Text style={styles.averageRatingValue}>
                  {reviewSummary.averageRating.toFixed(1)}
                </Text>
                <StarRating 
                  rating={reviewSummary.averageRating} 
                  size={16}
                  interactive={false}
                />
                <Text style={styles.reviewCount}>
                  {reviewSummary.totalReviews} {reviewSummary.totalReviews === 1 ? 'review' : 'reviews'}
                </Text>
              </View>
              
              <TouchableOpacity 
                style={styles.viewReviewsButton}
                onPress={() => Alert.alert('View Reviews', 'In a complete implementation, this would show all reviews')}
              >
                <Text style={styles.viewReviewsText}>View all reviews</Text>
                <Ionicons name="chevron-forward" size={16} color="#2196F3" />
              </TouchableOpacity>
            </View>
          </Card>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#007AFF',
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#fff',
  },
  favoriteButton: {
    padding: 8,
  },
  hotelImageContainer: {
    height: 200,
    backgroundColor: '#007AFF',
    justifyContent: 'center',
    alignItems: 'center',
  },
  hotelImagePlaceholder: {
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  hotelInfo: {
    backgroundColor: '#fff',
    padding: 16,
    marginBottom: 16,
  },
  hotelName: {
    fontSize: 24,
    fontWeight: '700',
    color: '#333',
    marginBottom: 8,
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  ratingText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 8,
  },
  hotelDetails: {
    borderTopWidth: 1,
    borderTopColor: '#eee',
    paddingTop: 12,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  detailText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 8,
  },
  bookingCard: {
    marginHorizontal: 16,
    marginBottom: 16,
    padding: 16,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#333',
    marginBottom: 16,
  },
  dateSelection: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  dateButton: {
    flex: 1,
    padding: 12,
    backgroundColor: '#f0f0f0',
    borderRadius: 8,
    marginHorizontal: 4,
  },
  dateLabel: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  dateValue: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  guestSelection: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  guestControl: {
    flex: 1,
    alignItems: 'center',
  },
  guestLabel: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  quantityControl: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  quantityButton: {
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: '#007AFF',
    justifyContent: 'center',
    alignItems: 'center',
  },
  quantityText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginHorizontal: 12,
    minWidth: 20,
    textAlign: 'center',
  },
  roomsSection: {
    backgroundColor: '#fff',
    marginBottom: 16,
  },
  roomsList: {
    paddingHorizontal: 16,
    paddingBottom: 16,
  },
  roomCard: {
    marginBottom: 12,
    padding: 12,
  },
  roomContent: {
    flexDirection: 'row',
  },
  roomImagePlaceholder: {
    width: 60,
    height: 60,
    borderRadius: 8,
    backgroundColor: '#f0f0f0',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  roomInfo: {
    flex: 1,
  },
  roomName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 4,
  },
  roomDescription: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
    lineHeight: 18,
  },
  roomPrice: {
    fontSize: 16,
    fontWeight: '700',
    color: '#007AFF',
  },
  roomActions: {
    alignItems: 'flex-end',
    justifyContent: 'center',
    marginTop: 8,
  },
  bookButton: {
    minWidth: 100,
  },
  descriptionCard: {
    marginHorizontal: 16,
    marginBottom: 16,
    padding: 16,
  },
  descriptionText: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
  },
  reviewsCard: {
    marginHorizontal: 16,
    marginBottom: 32,
    padding: 16,
  },
  reviewSummary: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  averageRating: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  averageRatingValue: {
    fontSize: 24,
    fontWeight: '700',
    color: '#333',
    marginRight: 8,
  },
  reviewCount: {
    fontSize: 14,
    color: '#666',
    marginLeft: 8,
  },
  viewReviewsButton: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  viewReviewsText: {
    fontSize: 14,
    color: '#2196F3',
    marginRight: 4,
  },
});

export default HotelDetailScreen;