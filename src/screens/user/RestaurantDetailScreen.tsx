import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  FlatList,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation, useRoute, RouteProp } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';

// Components
import { Button, Card, StarRating } from '../../components';

// Services
import { useAuth } from '../../contexts/AuthContext';
import { useRestaurant } from '../../contexts/RestaurantContext';
import { useReview } from '../../contexts/ReviewContext';

// Navigation types
import { RestaurantsStackParamList } from '../../navigation/RestaurantsStackNavigator';

type RestaurantDetailRouteProp = RouteProp<RestaurantsStackParamList, 'RestaurantDetail'>;
type RestaurantDetailNavigationProp = StackNavigationProp<RestaurantsStackParamList, 'RestaurantDetail'>;

interface Props {
  navigation: RestaurantDetailNavigationProp;
  route: RestaurantDetailRouteProp;
}

const RestaurantDetailScreen: React.FC<Props> = ({ navigation, route }) => {
  const { restaurant } = route.params;
  const { user } = useAuth();
  const { menuItems, getRestaurantById } = useRestaurant();
  const { getReviewSummary } = useReview();
  const [restaurantMenu, setRestaurantMenu] = useState<any[]>([]);
  const [reviewSummary, setReviewSummary] = useState<any>(null);
  const [cart, setCart] = useState<{[key: string]: number}>({});
  const [totalItems, setTotalItems] = useState(0);
  const [totalPrice, setTotalPrice] = useState(0);

  useEffect(() => {
    // Get menu items for this restaurant
    const items = menuItems.filter(item => item.restaurantId === restaurant.id);
    setRestaurantMenu(items);
    
    // Get review summary
    const summary = getReviewSummary(restaurant.id, 'restaurant');
    setReviewSummary(summary);
  }, [restaurant.id, menuItems, getReviewSummary]);

  useEffect(() => {
    // Calculate cart totals
    let items = 0;
    let price = 0;
    
    Object.keys(cart).forEach(itemId => {
      const quantity = cart[itemId];
      const item = restaurantMenu.find(menuItem => menuItem.id === itemId);
      if (item) {
        items += quantity;
        price += quantity * item.price;
      }
    });
    
    setTotalItems(items);
    setTotalPrice(price);
  }, [cart, restaurantMenu]);

  const handleAddToCart = (itemId: string) => {
    setCart(prev => ({
      ...prev,
      [itemId]: (prev[itemId] || 0) + 1
    }));
  };

  const handleRemoveFromCart = (itemId: string) => {
    setCart(prev => {
      const newCart = { ...prev };
      if (newCart[itemId] > 1) {
        newCart[itemId] -= 1;
      } else {
        delete newCart[itemId];
      }
      return newCart;
    });
  };

  const handlePlaceOrder = () => {
    if (totalItems === 0) {
      Alert.alert('Empty Cart', 'Please add items to your cart before placing an order.');
      return;
    }

    // Navigate to payment screen
    navigation.navigate('Payment', {
      amount: totalPrice + restaurant.deliveryFee,
      currency: 'GHS',
      paymentFor: 'order',
      referenceId: `order_${Date.now()}` // In a real app, this would be generated by the backend
    });
  };

  const renderMenuItem = ({ item }: { item: any }) => {
    const quantity = cart[item.id] || 0;
    
    return (
      <Card style={styles.menuItemCard}>
        <View style={styles.menuItemContent}>
          {item.image ? (
            <View style={styles.itemImagePlaceholder}>
              <Ionicons name="fast-food" size={24} color="#666" />
            </View>
          ) : (
            <View style={styles.itemImagePlaceholder}>
              <Ionicons name="fast-food" size={24} color="#666" />
            </View>
          )}
          
          <View style={styles.itemInfo}>
            <Text style={styles.itemName}>{item.name}</Text>
            <Text style={styles.itemDescription} numberOfLines={2}>
              {item.description}
            </Text>
            <Text style={styles.itemPrice}>₵{item.price.toFixed(2)}</Text>
          </View>
        </View>
        
        <View style={styles.cartControls}>
          {quantity > 0 ? (
            <View style={styles.quantityControl}>
              <TouchableOpacity 
                style={styles.quantityButton}
                onPress={() => handleRemoveFromCart(item.id)}
              >
                <Ionicons name="remove" size={20} color="#fff" />
              </TouchableOpacity>
              <Text style={styles.quantityText}>{quantity}</Text>
              <TouchableOpacity 
                style={styles.quantityButton}
                onPress={() => handleAddToCart(item.id)}
              >
                <Ionicons name="add" size={20} color="#fff" />
              </TouchableOpacity>
            </View>
          ) : (
            <Button
              title="Add"
              onPress={() => handleAddToCart(item.id)}
              style={styles.addButton}
              size="small"
            />
          )}
        </View>
      </Card>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton} 
            onPress={() => navigation.goBack()}
          >
            <Ionicons name="arrow-back" size={24} color="#fff" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>{restaurant.name}</Text>
          <TouchableOpacity 
            style={styles.favoriteButton}
            onPress={() => Alert.alert('Save Restaurant', 'Restaurant saved to favorites!')}
          >
            <Ionicons name="heart-outline" size={24} color="#fff" />
          </TouchableOpacity>
        </View>

        {/* Restaurant Image */}
        <View style={styles.restaurantImageContainer}>
          {restaurant.image ? (
            <View style={styles.restaurantImagePlaceholder}>
              <Ionicons name="restaurant" size={48} color="#fff" />
            </View>
          ) : (
            <View style={styles.restaurantImagePlaceholder}>
              <Ionicons name="restaurant" size={48} color="#fff" />
            </View>
          )}
        </View>

        {/* Restaurant Info */}
        <View style={styles.restaurantInfo}>
          <Text style={styles.restaurantName}>{restaurant.name}</Text>
          
          <View style={styles.ratingContainer}>
            <StarRating 
              rating={reviewSummary?.averageRating || 0} 
              size={16}
              interactive={false}
            />
            <Text style={styles.ratingText}>
              {reviewSummary?.averageRating?.toFixed(1) || '0.0'} 
              {reviewSummary?.totalReviews ? ` (${reviewSummary.totalReviews})` : ''}
            </Text>
          </View>
          
          <View style={styles.restaurantDetails}>
            <View style={styles.detailRow}>
              <Ionicons name="location" size={16} color="#666" />
              <Text style={styles.detailText}>{restaurant.address}</Text>
            </View>
            
            <View style={styles.detailRow}>
              <Ionicons name="time" size={16} color="#666" />
              <Text style={styles.detailText}>
                {restaurant.openingTime} - {restaurant.closingTime}
              </Text>
            </View>
            
            <View style={styles.detailRow}>
              <Ionicons name="bicycle" size={16} color="#666" />
              <Text style={styles.detailText}>Delivery: ₵{restaurant.deliveryFee.toFixed(2)}</Text>
            </View>
          </View>
        </View>

        {/* Menu Items */}
        <View style={styles.menuSection}>
          <Text style={styles.sectionTitle}>Menu</Text>
          <FlatList
            data={restaurantMenu}
            renderItem={renderMenuItem}
            keyExtractor={(item) => item.id}
            scrollEnabled={false}
            contentContainerStyle={styles.menuList}
          />
        </View>

        {/* Reviews Summary */}
        {reviewSummary && reviewSummary.totalReviews > 0 && (
          <Card style={styles.reviewsCard}>
            <Text style={styles.sectionTitle}>Customer Reviews</Text>
            
            <View style={styles.reviewSummary}>
              <View style={styles.averageRating}>
                <Text style={styles.averageRatingValue}>
                  {reviewSummary.averageRating.toFixed(1)}
                </Text>
                <StarRating 
                  rating={reviewSummary.averageRating} 
                  size={16}
                  interactive={false}
                />
                <Text style={styles.reviewCount}>
                  {reviewSummary.totalReviews} {reviewSummary.totalReviews === 1 ? 'review' : 'reviews'}
                </Text>
              </View>
              
              <TouchableOpacity 
                style={styles.viewReviewsButton}
                onPress={() => Alert.alert('View Reviews', 'In a complete implementation, this would show all reviews')}
              >
                <Text style={styles.viewReviewsText}>View all reviews</Text>
                <Ionicons name="chevron-forward" size={16} color="#2196F3" />
              </TouchableOpacity>
            </View>
          </Card>
        )}
      </ScrollView>

      {/* Cart Summary */}
      {totalItems > 0 && (
        <View style={styles.cartSummary}>
          <View style={styles.cartInfo}>
            <Text style={styles.cartItems}>{totalItems} {totalItems === 1 ? 'item' : 'items'}</Text>
            <Text style={styles.cartTotal}>₵{totalPrice.toFixed(2)}</Text>
          </View>
          <Button
            title={`Place Order • ₵${(totalPrice + restaurant.deliveryFee).toFixed(2)}`}
            onPress={handlePlaceOrder}
            style={styles.placeOrderButton}
          />
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#007AFF',
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#fff',
  },
  favoriteButton: {
    padding: 8,
  },
  restaurantImageContainer: {
    height: 200,
    backgroundColor: '#007AFF',
    justifyContent: 'center',
    alignItems: 'center',
  },
  restaurantImagePlaceholder: {
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  restaurantInfo: {
    backgroundColor: '#fff',
    padding: 16,
    marginBottom: 16,
  },
  restaurantName: {
    fontSize: 24,
    fontWeight: '700',
    color: '#333',
    marginBottom: 8,
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  ratingText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 8,
  },
  restaurantDetails: {
    borderTopWidth: 1,
    borderTopColor: '#eee',
    paddingTop: 12,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  detailText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 8,
  },
  menuSection: {
    backgroundColor: '#fff',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#333',
    padding: 16,
    paddingBottom: 8,
  },
  menuList: {
    paddingHorizontal: 16,
    paddingBottom: 16,
  },
  menuItemCard: {
    marginBottom: 12,
    padding: 12,
  },
  menuItemContent: {
    flexDirection: 'row',
  },
  itemImagePlaceholder: {
    width: 60,
    height: 60,
    borderRadius: 8,
    backgroundColor: '#f0f0f0',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  itemInfo: {
    flex: 1,
  },
  itemName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 4,
  },
  itemDescription: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
    lineHeight: 18,
  },
  itemPrice: {
    fontSize: 16,
    fontWeight: '700',
    color: '#007AFF',
  },
  cartControls: {
    alignItems: 'flex-end',
    justifyContent: 'center',
  },
  quantityControl: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  quantityButton: {
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: '#007AFF',
    justifyContent: 'center',
    alignItems: 'center',
  },
  quantityText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginHorizontal: 12,
    minWidth: 20,
    textAlign: 'center',
  },
  addButton: {
    minWidth: 80,
  },
  reviewsCard: {
    marginHorizontal: 16,
    marginBottom: 32,
    padding: 16,
  },
  reviewSummary: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  averageRating: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  averageRatingValue: {
    fontSize: 24,
    fontWeight: '700',
    color: '#333',
    marginRight: 8,
  },
  reviewCount: {
    fontSize: 14,
    color: '#666',
    marginLeft: 8,
  },
  viewReviewsButton: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  viewReviewsText: {
    fontSize: 14,
    color: '#2196F3',
    marginRight: 4,
  },
  cartSummary: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#eee',
  },
  cartInfo: {
    flex: 1,
  },
  cartItems: {
    fontSize: 14,
    color: '#666',
  },
  cartTotal: {
    fontSize: 20,
    fontWeight: '700',
    color: '#333',
  },
  placeOrderButton: {
    flex: 2,
    marginLeft: 16,
  },
});

export default RestaurantDetailScreen;